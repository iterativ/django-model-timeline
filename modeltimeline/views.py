# -*- coding: utf-8 -*-## ITerativ GmbH# http://www.iterativ.ch/## Copyright (c) 2013 ITerativ GmbH. All rights reserved.## Created on Nov 28, 2013# @author: maersu <me@maersu.ch>import datetimefrom classery.apps.mailer.models import SendTrackerfrom classery.apps.participate.models import Nominationfrom modeltimeline.utils import TimeLiner, DataFilterConfigfrom classery.apps.wish.models import Wish, Commentfrom django.contrib.auth.models import Userfrom django.views.generic import TemplateViewfrom django.contrib.admin.models import LogEntry# http://bootsnipp.com/snippets/featured/timeline-responsiveTL_DATA = [    (Wish, 'magic', ['created', 'modified', 'start_date']),    (User, 'user', ['date_joined']),    (SendTracker, 'envelope',),    (Comment, 'comments',),    (Nomination, 'certificate',),    (LogEntry, 'log_book', ['action_time'], False)]#for w in tl.add_time_stamped(Wish, fields=['created', 'modified', 'start_date']):#    if w.start_date:#        tl.add_entity(w.start_date + datetime.timedelta(days=1), w, icon=tl.get_icon('due_date'),#                      pre_title='Feedbackmail senden', use_cache=True)#        tl.add_entity(w.start_date + datetime.timedelta(days=-3), w, icon=tl.get_icon('due_date'),#                      pre_title='Reminder senden', use_cache=True)class TimeLineIndex(TemplateView):    template_name = 'timeline/index.html'    def get_context_data(self):        context = super(TimeLineIndex, self).get_context_data()        used_timeline_filters = self.request.session.get('used_timeline_filters', None)        context['config'] = DataFilterConfig(TL_DATA, used_timeline_filters)        return contextclass TimeLineContent(TemplateView):    template_name = 'timeline/content.html'    def get_context_data(self):        context = super(TimeLineContent, self).get_context_data()        get = self.request.GET.copy()        dc = DataFilterConfig(TL_DATA)        start = dc.parse_date(get.get('start'))        end = dc.parse_date(get.get('end'))        filters = get.getlist('filters[]')        tl = TimeLiner(start, end)        for f in dc:            if f['class_name'] in filters:                tl.add_time_stamped(f['class'], fields=f['fields'], icon=f['icon'])        tl.initialize()        context['timeliner'] = tl        self.request.session['used_timeline_filters'] = filters        return context